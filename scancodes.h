#ifndef SCANCODES_H
#define SCANCODES_H

#include <stdint.h>

// Set Ctrl and Shift as first two keys in the virtual matrix to interpret
// simultaneously pressed keys as expected
#define SICOMP_CTRL_IDX 0x00
#define SICOMP_SHFT_IDX 0x01
#define SICOMP_CAPS_IDX 0x3A
#define SICOMP_INTL_IDX 0x15
#define NC              0xFF // not connected/unavailable

typedef struct {
  int16_t key;
  bool shift;
  bool ctrl;
  bool locking;
} scancode_t;

// Standard Keycodes
// {Key, Shift+Key, Ctrl+Key}
uint8_t STD_SCANCODES[][3] = {
  {NC,   NC,   NC  },
  {NC,   NC,   NC  },
  {0xA0, 0xE0, NC  },
  {0xA1, 0xE1, NC  },
  {0x80, 0xC0, NC  },
  {0x81, 0xC1, NC  },
  {0x82, 0xC2, NC  },
  {0x83, 0xC3, NC  },
  {0x84, 0xC4, NC  },
  {0x85, 0xC5, NC  },
  {0x86, 0xC6, NC  },
  {0x87, 0xC7, NC  },
  {0x88, 0xC8, NC  },
  {0x89, 0xC9, NC  },
  {0x8A, 0xCA, NC  },
  {0x8B, 0xCB, NC  },
  {0x8C, 0xCC, NC  },
  {0x8D, 0xCD, NC  },
  {0x8E, 0xCE, NC  },
  {0x8F, 0xCF, NC  },
  {NC,   NC,   0x00},
  {NC,   NC,   NC  },
  {NC,   NC,   0xA6},
  {0xA2, 0xE2, NC  },
  {0x31, 0x21, 0xB1},
  {0x32, 0x22, 0xB2},
  {0x33, 0x40, 0xB3},
  {0x34, 0x24, 0xB4},
  {0x35, 0x25, 0xB5},
  {0x36, 0x26, 0xB6},
  {0x37, 0x2F, 0xB7},
  {0x38, 0x28, 0xB8},
  {0x39, 0x29, 0xB9},
  {0x30, 0x3D, 0x1F},
  {0x7E, 0x3F, NC  },
  {0x27, 0x60, 0x1E},
  {0xA7, 0xE7, NC  },
  {0x94, 0xD4, NC  },
  {0x95, 0xD5, NC  },
  {0x96, 0xD6, NC  },
  {0xA3, 0xE3, NC  },
  {0x51, 0x71, 0x11},
  {0x57, 0x77, 0x17},
  {0x45, 0x65, 0x05},
  {0x52, 0x72, 0x12},
  {0x54, 0x74, 0x14},
  {0x5A, 0x7A, 0x1A},
  {0x55, 0x75, 0x15},
  {0x49, 0x69, 0x09},
  {0x4F, 0x6F, 0x0F},
  {0x50, 0x70, 0x10},
  {0x5D, 0x7D, 0x00},
  {0x2B, 0x2A, 0x1B},
  {0x0D, 0x0D, NC  },
  {0x97, 0xD7, NC  },
  {0x92, 0xD2, NC  },
  {0x98, 0xD8, NC  },
  {0xA8, 0xE8, NC  },
  {NC,   NC,   NC  },
  {0x41, 0x61, 0x01},
  {0x53, 0x73, 0x13},
  {0x44, 0x64, 0x04},
  {0x46, 0x66, 0x06},
  {0x47, 0x67, 0x07},
  {0x48, 0x68, 0x08},
  {0x4A, 0x6A, 0x0A},
  {0x4B, 0x6B, 0x0B},
  {0x4C, 0x6C, 0x0C},
  {0x5C, 0x7C, NC  },
  {0x5B, 0x7B, NC  },
  {0x23, 0x5E, 0x1D},
  {0x90, 0xD0, NC  },
  {0x91, 0xD1, NC  },
  {0x99, 0xD9, NC  },
  {0x3C, 0x3E, 0x1C},
  {0x59, 0x79, 0x19},
  {0x58, 0x78, 0x18},
  {0x43, 0x63, 0x03},
  {0x56, 0x76, 0x16},
  {0x42, 0x62, 0x02},
  {0x4E, 0x6E, 0x0E},
  {0x4D, 0x6D, 0x0D},
  {0x2C, 0x3B, NC  },
  {0x2E, 0x3A, NC  },
  {0x2D, 0x5F, NC  },
  {0xA5, 0xE5, NC  },
  {0x9A, 0xDA, NC  },
  {0x93, 0xD3, NC  },
  {0x9B, 0xDB, NC  },
  {0x20, 0x20, NC  },
  {0x9C, 0xDC, NC  },
  {0x9D, 0xDD, NC  },
  {0x9E, 0xDE, NC  },
};

// International Keycodes (when pressing Ctrl+Intl)
// {Key, Shift+Key, Ctrl+Key}
uint8_t INTL_SCANCODES[][3] = {
  {NC,   NC,   NC  },
  {NC,   NC,   NC  },
  {0xA0, 0xE0, NC  },
  {0xA1, 0xE1, NC  },
  {0x80, 0xC0, NC  },
  {0x81, 0xC1, NC  },
  {0x82, 0xC2, NC  },
  {0x83, 0xC3, NC  },
  {0x84, 0xC4, NC  },
  {0x85, 0xC5, NC  },
  {0x86, 0xC6, NC  },
  {0x87, 0xC7, NC  },
  {0x88, 0xC8, NC  },
  {0x89, 0xC9, NC  },
  {0x8A, 0xCA, NC  },
  {0x8B, 0xCB, NC  },
  {0x8C, 0xCC, NC  },
  {0x8D, 0xCD, NC  },
  {0x8E, 0xCE, NC  },
  {0x8F, 0xCF, NC  },
  {NC,   NC,   0x00},
  {NC,   NC,   NC  },
  {NC,   NC,   0xA6},
  {0xA2, 0xE2, NC  },
  {0x31, 0x21, 0xB1},
  {0x32, 0x22, 0xB2},
  {0x33, 0x23, 0xB3},
  {0x34, 0x24, 0xB4},
  {0x35, 0x25, 0xB5},
  {0x36, 0x26, 0xB6},
  {0x37, 0x27, 0xB7},
  {0x38, 0x28, 0xB8},
  {0x39, 0x29, 0xB9},
  {0x30, 0x5F, 0x1F},
  {0x2D, 0x3D, NC  },
  {0x5E, 0x7E, 0x1E},
  {0xA7, 0xE7, NC  },
  {0x94, 0xD4, NC  },
  {0x95, 0xD5, NC  },
  {0x96, 0xD6, NC  },
  {0xA3, 0xE3, NC  },
  {0x51, 0x71, 0x11},
  {0x57, 0x77, 0x17},
  {0x45, 0x65, 0x05},
  {0x52, 0x72, 0x12},
  {0x54, 0x74, 0x14},
  {0x59, 0x79, 0x19},
  {0x55, 0x75, 0x15},
  {0x49, 0x69, 0x09},
  {0x4F, 0x6F, 0x0F},
  {0x50, 0x70, 0x10},
  {0x40, 0x60, 0x00},
  {0x5B, 0x7B, 0x1B},
  {0x0D, 0x0D, NC  },
  {0x97, 0xD7, NC  },
  {0x92, 0xD2, NC  },
  {0x98, 0xD8, NC  },
  {0xA8, 0xE8, NC  },
  {NC  , NC  , NC  },
  {0x41, 0x61, 0x01},
  {0x53, 0x73, 0x13},
  {0x44, 0x64, 0x04},
  {0x46, 0x66, 0x06},
  {0x47, 0x67, 0x07},
  {0x48, 0x68, 0x08},
  {0x4A, 0x6A, 0x0A},
  {0x4B, 0x6B, 0x0B},
  {0x4C, 0x6C, 0x0C},
  {0x3B, 0x2B, NC  },
  {0x3A, 0x2A, NC  },
  {0x5D, 0x7D, 0x1D},
  {0x90, 0xD0, NC  },
  {0x91, 0xD1, NC  },
  {0x99, 0xD9, NC  },
  {0x5C, 0x7C, 0x1C},
  {0x5A, 0x7A, 0x1A},
  {0x58, 0x78, 0x18},
  {0x43, 0x63, 0x03},
  {0x56, 0x76, 0x16},
  {0x42, 0x62, 0x02},
  {0x4E, 0x6E, 0x0E},
  {0x4D, 0x6D, 0x0D},
  {0x2C, 0x3C, NC  },
  {0x2E, 0x3E, NC  },
  {0x2F, 0x3F, NC  },
  {0xA5, 0xE5, NC  },
  {0x9A, 0xDA, NC  },
  {0x93, 0xD3, NC  },
  {0x9B, 0xDB, NC  },
  {0x20, 0x20, NC  },
  {0x9C, 0xDC, NC  },
  {0x9D, 0xDD, NC  },
  {0x9E, 0xDE, NC  },
};

// Keycodes of alternating keys
// {On, Off, Idx}
uint8_t ALT_SCANCODES[][3] = {
  {0xDF, 0x9F, SICOMP_INTL_IDX},
  {0xA9, 0xE9, SICOMP_CAPS_IDX},
};

scancode_t parse_scancode(uint8_t raw_code, bool intl) {
    scancode_t code = {-1, false, false, false};
    for (size_t i = 0; i < 93; i++) {
        for (size_t j = 0; j < 3; j++) {
            if ((intl ? INTL_SCANCODES : STD_SCANCODES)[i][j] == raw_code) {
                code.key = i;
                code.shift = j == 1;
                code.ctrl = j == 2;
                return code;
            }
        }
    }
    for (size_t i = 0; i < 2; i++) {
        for (size_t j = 0; j < 2; j++) {
            if (ALT_SCANCODES[i][j] == raw_code) {
                code.key = ALT_SCANCODES[i][2];
                code.locking = true;
                return code;
            }
        }
    }
    return code;
}

#endif
